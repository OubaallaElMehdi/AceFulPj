version: '3.8'

services:

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - ace-network
    restart: always


  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    networks:
      - ace-network
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    restart: always

  # Eureka Service Registry
  eureka-server:
    build:
      context: ./../Ace-Eureka
    ports:
      - "8761:8761"
    container_name: ace-eureka
    networks:
      - ace-network
    environment:
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=false
      - EUREKA_CLIENT_FETCH_REGISTRY=false
    restart: always

  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - ace-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092" # Internal and external communication
      - "29092:29092" # Host access
    environment:
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - ace-network
    restart: always

  # Gateway Service
  gateway-service:
    build:
      context: ./../Ace-Gateway
    ports:
      - "8080:8080"
    container_name: ace-gateway
    networks:
      - ace-network
    depends_on:
      - eureka-server
    environment:
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://ace-eureka:8761/eureka
      - SPRING_PROFILES_ACTIVE=docker

      #   Anomaly Detection Service
  anomaly-detection-service:
    build:
      context: ./../AnomalyDetectionService
    ports:
      - "5000:5000"
    container_name: anomaly-detection-service
    networks:
      - ace-network
    depends_on:
      - gateway-service
      - kafka
      - vehicle-service
      - ace-frontend
    environment:
      - KAFKA_BROKER=kafka:9092
      - VEHICLE_SERVICE_URL=http://vehicle-service:8081

  # Vehicle Service
  vehicle-service:
    build:
      context: ./../VehicleService
    ports:
      - "8081:8081"
    container_name: vehicle-service
    networks:
      - ace-network
    depends_on:
      - eureka-server
      - vehicle-db
      - gateway-service
      - kafka
    environment:
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://ace-eureka:8761/eureka
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://vehicle-db:3306/vehicle_service
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=root
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:9092
    restart: always

  # User Service
  user-service:
    build:
      context: ./../UserService
    ports:
      - "8082:8082"
    container_name: user-service
    networks:
      - ace-network
    depends_on:
      - eureka-server
      - user-db
      - gateway-service
      - kafka
    environment:
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://ace-eureka:8761/eureka
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://user-db:3306/user_service
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=root
    restart: always

  # Alert Service
  alert-service:
    build:
      context: ./../AlertService
    ports:
      - "8083:8083"
    container_name: alert-service
    networks:
      - ace-network
    depends_on:
      - eureka-server
      - alert-db
      - gateway-service
      - kafka
    environment:
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://ace-eureka:8761/eureka
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://alert-db:3306/alert_service
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=root
    restart: always
  # MySQL for Vehicle Service
  vehicle-db:
    image: mysql:8
    container_name: vehicle-db
    networks:
      - ace-network
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=vehicle_service
    ports:
      - "3307:3306"
    volumes:
      - ./vehicle_service.sql:/docker-entrypoint-initdb.d/vehicle_service.sql

  # MySQL for User Service
  user-db:
    image: mysql:8
    container_name: user-db
    networks:
      - ace-network
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=user_service
    ports:
      - "3308:3306"

  # MySQL for Alert Service
  alert-db:
    image: mysql:8
    container_name: alert-db
    networks:
      - ace-network
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=alert_service
    ports:
      - "3309:3306"




 #  Angular Frontend
  ace-frontend:
    build:
      context: ./../next-ace-front
    ports:
      - "3000:3000"
    container_name: ace-frontend
    networks:
      - ace-network
    depends_on:
      - gateway-service
    environment:
      - NG_PROXY=http://gateway-service:8080


#SonarQube
  sonarqube:
    image: ${SONARQUBE_IMAGE_NAME}
    restart: unless-stopped
    ports:
      - "9000:${SONARQUBE_PORT}"
    volumes:
      - sonarqube_data:/opt/sonarqube/data
    environment:
      - SONARQUBE_JDBC_URL=${SONARQUBE_JDBC_URL}
      - SONARQUBE_JDBC_USERNAME=${SONARQUBE_JDBC_USERNAME}
      - SONARQUBE_JDBC_PASSWORD=${SONARQUBE_JDBC_PASSWORD}
    depends_on:
      - sonarqube-db
    networks:
      - ace-network

  sonarqube-db:
    image: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${SONARQUBE_DB_NAME}
      - POSTGRES_USER=${SONARQUBE_DB_USER}
      - POSTGRES_PASSWORD=${SONARQUBE_DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ace-network

volumes:
  sonarqube_data:
  postgres_data:

networks:
  ace-network:
    driver: bridge

